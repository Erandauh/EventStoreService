//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34003
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EventStoreService.Configuration
{
    
    
    /// <summary>
    /// The EventStoreServiceConfiguration Configuration Section.
    /// </summary>
    public partial class EventStoreServiceConfiguration : global::System.Configuration.ConfigurationSection
    {
        
        #region Singleton Instance
        /// <summary>
        /// The XML name of the EventStoreServiceConfiguration Configuration Section.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string EventStoreServiceConfigurationSectionName = "eventStoreService";
        
        /// <summary>
        /// Gets the EventStoreServiceConfiguration instance.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public static global::EventStoreService.Configuration.EventStoreServiceConfiguration Instance
        {
            get
            {
                return ((global::EventStoreService.Configuration.EventStoreServiceConfiguration)(global::System.Configuration.ConfigurationManager.GetSection(global::EventStoreService.Configuration.EventStoreServiceConfiguration.EventStoreServiceConfigurationSectionName)));
            }
        }
        #endregion
        
        #region Xmlns Property
        /// <summary>
        /// The XML name of the <see cref="Xmlns"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string XmlnsPropertyName = "xmlns";
        
        /// <summary>
        /// Gets the XML namespace of this Configuration Section.
        /// </summary>
        /// <remarks>
        /// This property makes sure that if the configuration file contains the XML namespace,
        /// the parser doesn't throw an exception because it encounters the unknown "xmlns" attribute.
        /// </remarks>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::EventStoreService.Configuration.EventStoreServiceConfiguration.XmlnsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string Xmlns
        {
            get
            {
                return ((string)(base[global::EventStoreService.Configuration.EventStoreServiceConfiguration.XmlnsPropertyName]));
            }
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region WindowsService Property
        /// <summary>
        /// The XML name of the <see cref="WindowsService"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string WindowsServicePropertyName = "windowsService";
        
        /// <summary>
        /// Gets or sets the WindowsService.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The WindowsService.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::EventStoreService.Configuration.EventStoreServiceConfiguration.WindowsServicePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual global::EventStoreService.Configuration.WindowsServiceElement WindowsService
        {
            get
            {
                return ((global::EventStoreService.Configuration.WindowsServiceElement)(base[global::EventStoreService.Configuration.EventStoreServiceConfiguration.WindowsServicePropertyName]));
            }
            set
            {
                base[global::EventStoreService.Configuration.EventStoreServiceConfiguration.WindowsServicePropertyName] = value;
            }
        }
        #endregion
        
        #region EventStore Property
        /// <summary>
        /// The XML name of the <see cref="EventStore"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string EventStorePropertyName = "eventStore";
        
        /// <summary>
        /// Gets or sets the EventStore.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The EventStore.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::EventStoreService.Configuration.EventStoreServiceConfiguration.EventStorePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual global::EventStoreService.Configuration.EventStoreElement EventStore
        {
            get
            {
                return ((global::EventStoreService.Configuration.EventStoreElement)(base[global::EventStoreService.Configuration.EventStoreServiceConfiguration.EventStorePropertyName]));
            }
            set
            {
                base[global::EventStoreService.Configuration.EventStoreServiceConfiguration.EventStorePropertyName] = value;
            }
        }
        #endregion
    }
}
namespace EventStoreService.Configuration
{
    
    
    /// <summary>
    /// The WindowsServiceElement Configuration Element.
    /// </summary>
    public partial class WindowsServiceElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region ServiceName Property
        /// <summary>
        /// The XML name of the <see cref="ServiceName"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string ServiceNamePropertyName = "serviceName";
        
        /// <summary>
        /// Gets or sets the ServiceName.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The ServiceName.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::EventStoreService.Configuration.WindowsServiceElement.ServiceNamePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual string ServiceName
        {
            get
            {
                return ((string)(base[global::EventStoreService.Configuration.WindowsServiceElement.ServiceNamePropertyName]));
            }
            set
            {
                base[global::EventStoreService.Configuration.WindowsServiceElement.ServiceNamePropertyName] = value;
            }
        }
        #endregion
        
        #region Description Property
        /// <summary>
        /// The XML name of the <see cref="Description"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string DescriptionPropertyName = "description";
        
        /// <summary>
        /// Gets or sets the Description.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Description.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::EventStoreService.Configuration.WindowsServiceElement.DescriptionPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string Description
        {
            get
            {
                return ((string)(base[global::EventStoreService.Configuration.WindowsServiceElement.DescriptionPropertyName]));
            }
            set
            {
                base[global::EventStoreService.Configuration.WindowsServiceElement.DescriptionPropertyName] = value;
            }
        }
        #endregion
        
        #region DisplayName Property
        /// <summary>
        /// The XML name of the <see cref="DisplayName"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string DisplayNamePropertyName = "displayName";
        
        /// <summary>
        /// Gets or sets the DisplayName.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The DisplayName.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::EventStoreService.Configuration.WindowsServiceElement.DisplayNamePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string DisplayName
        {
            get
            {
                return ((string)(base[global::EventStoreService.Configuration.WindowsServiceElement.DisplayNamePropertyName]));
            }
            set
            {
                base[global::EventStoreService.Configuration.WindowsServiceElement.DisplayNamePropertyName] = value;
            }
        }
        #endregion
    }
}
namespace EventStoreService.Configuration
{
    
    
    /// <summary>
    /// The EventStoreElement Configuration Element.
    /// </summary>
    public partial class EventStoreElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region RunMode Property
        /// <summary>
        /// The XML name of the <see cref="RunMode"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string RunModePropertyName = "runMode";
        
        /// <summary>
        /// Gets or sets the type of node to start.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The type of node to start.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::EventStoreService.Configuration.EventStoreElement.RunModePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue=RunMode.SingleNode)]
        public virtual global::EventStoreService.Configuration.RunMode RunMode
        {
            get
            {
                return ((global::EventStoreService.Configuration.RunMode)(base[global::EventStoreService.Configuration.EventStoreElement.RunModePropertyName]));
            }
            set
            {
                base[global::EventStoreService.Configuration.EventStoreElement.RunModePropertyName] = value;
            }
        }
        #endregion
        
        #region BinaryPath Property
        /// <summary>
        /// The XML name of the <see cref="BinaryPath"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string BinaryPathPropertyName = "binaryPath";
        
        /// <summary>
        /// Gets or sets the path to the EventStore binaries.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The path to the EventStore binaries.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::EventStoreService.Configuration.EventStoreElement.BinaryPathPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue="eventstore")]
        public virtual string BinaryPath
        {
            get
            {
                return ((string)(base[global::EventStoreService.Configuration.EventStoreElement.BinaryPathPropertyName]));
            }
            set
            {
                base[global::EventStoreService.Configuration.EventStoreElement.BinaryPathPropertyName] = value;
            }
        }
        #endregion
        
        #region Database Property
        /// <summary>
        /// The XML name of the <see cref="Database"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string DatabasePropertyName = "database";
        
        /// <summary>
        /// Gets or sets the Database.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Database.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::EventStoreService.Configuration.EventStoreElement.DatabasePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual global::EventStoreService.Configuration.DatabaseElement Database
        {
            get
            {
                return ((global::EventStoreService.Configuration.DatabaseElement)(base[global::EventStoreService.Configuration.EventStoreElement.DatabasePropertyName]));
            }
            set
            {
                base[global::EventStoreService.Configuration.EventStoreElement.DatabasePropertyName] = value;
            }
        }
        #endregion
        
        #region Projections Property
        /// <summary>
        /// The XML name of the <see cref="Projections"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string ProjectionsPropertyName = "projections";
        
        /// <summary>
        /// Gets or sets the Projections.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Projections.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::EventStoreService.Configuration.EventStoreElement.ProjectionsPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual global::EventStoreService.Configuration.ProjectionsElement Projections
        {
            get
            {
                return ((global::EventStoreService.Configuration.ProjectionsElement)(base[global::EventStoreService.Configuration.EventStoreElement.ProjectionsPropertyName]));
            }
            set
            {
                base[global::EventStoreService.Configuration.EventStoreElement.ProjectionsPropertyName] = value;
            }
        }
        #endregion
        
        #region SingleNode Property
        /// <summary>
        /// The XML name of the <see cref="SingleNode"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string SingleNodePropertyName = "singleNode";
        
        /// <summary>
        /// Gets or sets configuration for single node run mode.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("Configuration for single node run mode.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::EventStoreService.Configuration.EventStoreElement.SingleNodePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual global::EventStoreService.Configuration.SingleNodeElement SingleNode
        {
            get
            {
                return ((global::EventStoreService.Configuration.SingleNodeElement)(base[global::EventStoreService.Configuration.EventStoreElement.SingleNodePropertyName]));
            }
            set
            {
                base[global::EventStoreService.Configuration.EventStoreElement.SingleNodePropertyName] = value;
            }
        }
        #endregion
        
        #region Cluster Property
        /// <summary>
        /// The XML name of the <see cref="Cluster"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string ClusterPropertyName = "cluster";
        
        /// <summary>
        /// Gets or sets configuration for cluster run mode.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("Configuration for cluster run mode.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::EventStoreService.Configuration.EventStoreElement.ClusterPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual global::EventStoreService.Configuration.ClusterElement Cluster
        {
            get
            {
                return ((global::EventStoreService.Configuration.ClusterElement)(base[global::EventStoreService.Configuration.EventStoreElement.ClusterPropertyName]));
            }
            set
            {
                base[global::EventStoreService.Configuration.EventStoreElement.ClusterPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace EventStoreService.Configuration
{
    
    
    /// <summary>
    /// The DatabaseElement Configuration Element.
    /// </summary>
    public partial class DatabaseElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region InMemory Property
        /// <summary>
        /// The XML name of the <see cref="InMemory"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string InMemoryPropertyName = "inMemory";
        
        /// <summary>
        /// Gets or sets keep everything in memory, no directories or files are created.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::PropertyCommand(Opts.InMemDbCmd)]
        [global::System.ComponentModel.DescriptionAttribute("Keep everything in memory, no directories or files are created.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::EventStoreService.Configuration.DatabaseElement.InMemoryPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue=true)]
        public virtual bool InMemory
        {
            get
            {
                return ((bool)(base[global::EventStoreService.Configuration.DatabaseElement.InMemoryPropertyName]));
            }
            set
            {
                base[global::EventStoreService.Configuration.DatabaseElement.InMemoryPropertyName] = value;
            }
        }
        #endregion
        
        #region DbPath Property
        /// <summary>
        /// The XML name of the <see cref="DbPath"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string DbPathPropertyName = "path";
        
        /// <summary>
        /// Gets or sets the path the db should be loaded/saved to.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::PropertyCommand(Opts.DbPathCmd)]
        [global::System.ComponentModel.DescriptionAttribute("The path the db should be loaded/saved to.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::EventStoreService.Configuration.DatabaseElement.DbPathPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue=Opts.DbPathDefault)]
        public virtual string DbPath
        {
            get
            {
                return ((string)(base[global::EventStoreService.Configuration.DatabaseElement.DbPathPropertyName]));
            }
            set
            {
                base[global::EventStoreService.Configuration.DatabaseElement.DbPathPropertyName] = value;
            }
        }
        #endregion
        
        #region Logs Property
        /// <summary>
        /// The XML name of the <see cref="Logs"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string LogsPropertyName = "logs";
        
        /// <summary>
        /// Gets or sets the Logs.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::PropertyCommand(Opts.LogsCmd)]
        [global::System.ComponentModel.DescriptionAttribute("The Logs.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::EventStoreService.Configuration.DatabaseElement.LogsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string Logs
        {
            get
            {
                return ((string)(base[global::EventStoreService.Configuration.DatabaseElement.LogsPropertyName]));
            }
            set
            {
                base[global::EventStoreService.Configuration.DatabaseElement.LogsPropertyName] = value;
            }
        }
        #endregion
        
        #region SkipDbVerify Property
        /// <summary>
        /// The XML name of the <see cref="SkipDbVerify"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string SkipDbVerifyPropertyName = "skipDbVerify";
        
        /// <summary>
        /// Gets or sets bypasses the checking of file hashes of database during startup (allows for faster startup).
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::PropertyCommand(Opts.SkipDbVerifyCmd)]
        [global::System.ComponentModel.DescriptionAttribute("Bypasses the checking of file hashes of database during startup (allows for faste" +
            "r startup).")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::EventStoreService.Configuration.DatabaseElement.SkipDbVerifyPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue=Opts.SkipDbVerifyDefault)]
        public virtual bool SkipDbVerify
        {
            get
            {
                return ((bool)(base[global::EventStoreService.Configuration.DatabaseElement.SkipDbVerifyPropertyName]));
            }
            set
            {
                base[global::EventStoreService.Configuration.DatabaseElement.SkipDbVerifyPropertyName] = value;
            }
        }
        #endregion
        
        #region CachedChunks Property
        /// <summary>
        /// The XML name of the <see cref="CachedChunks"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string CachedChunksPropertyName = "cachedChunks";
        
        /// <summary>
        /// Gets or sets the number of chunks to cache in unmanaged memory.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::PropertyCommand(Opts.CachedChunksCmd)]
        [global::System.ComponentModel.DescriptionAttribute("The number of chunks to cache in unmanaged memory.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::EventStoreService.Configuration.DatabaseElement.CachedChunksPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue=Opts.CachedChunksDefault)]
        public virtual int CachedChunks
        {
            get
            {
                return ((int)(base[global::EventStoreService.Configuration.DatabaseElement.CachedChunksPropertyName]));
            }
            set
            {
                base[global::EventStoreService.Configuration.DatabaseElement.CachedChunksPropertyName] = value;
            }
        }
        #endregion
        
        #region ChunksCacheSize Property
        /// <summary>
        /// The XML name of the <see cref="ChunksCacheSize"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string ChunksCacheSizePropertyName = "chunksCacheSize";
        
        /// <summary>
        /// Gets or sets the amount of unmanaged memory to use for caching chunks.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::PropertyCommand(Opts.ChunksCacheSizeCmd)]
        [global::System.ComponentModel.DescriptionAttribute("The amount of unmanaged memory to use for caching chunks.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::EventStoreService.Configuration.DatabaseElement.ChunksCacheSizePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue=TFConsts.ChunksCacheSize)]
        public virtual int ChunksCacheSize
        {
            get
            {
                return ((int)(base[global::EventStoreService.Configuration.DatabaseElement.ChunksCacheSizePropertyName]));
            }
            set
            {
                base[global::EventStoreService.Configuration.DatabaseElement.ChunksCacheSizePropertyName] = value;
            }
        }
        #endregion
        
        #region MinFlushDelay Property
        /// <summary>
        /// The XML name of the <see cref="MinFlushDelay"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string MinFlushDelayPropertyName = "minFlushDelay";
        
        /// <summary>
        /// Gets or sets the minimum flush delay in milliseconds.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::PropertyCommand(Opts.MinFlushDelayMsCmd)]
        [global::System.ComponentModel.DescriptionAttribute("The minimum flush delay in milliseconds.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::EventStoreService.Configuration.DatabaseElement.MinFlushDelayPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue=2d)]
        public virtual double MinFlushDelay
        {
            get
            {
                return ((double)(base[global::EventStoreService.Configuration.DatabaseElement.MinFlushDelayPropertyName]));
            }
            set
            {
                base[global::EventStoreService.Configuration.DatabaseElement.MinFlushDelayPropertyName] = value;
            }
        }
        #endregion
        
        #region StatsPeriod Property
        /// <summary>
        /// The XML name of the <see cref="StatsPeriod"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string StatsPeriodPropertyName = "statsPeriod";
        
        /// <summary>
        /// Gets or sets the number of seconds between statistics gathers.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::PropertyCommand(Opts.StatsPeriodCmd)]
        [global::System.ComponentModel.DescriptionAttribute("The number of seconds between statistics gathers.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::EventStoreService.Configuration.DatabaseElement.StatsPeriodPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue=Opts.StatsPeriodDefault)]
        public virtual int StatsPeriod
        {
            get
            {
                return ((int)(base[global::EventStoreService.Configuration.DatabaseElement.StatsPeriodPropertyName]));
            }
            set
            {
                base[global::EventStoreService.Configuration.DatabaseElement.StatsPeriodPropertyName] = value;
            }
        }
        #endregion
        
        #region NodePriority Property
        /// <summary>
        /// The XML name of the <see cref="NodePriority"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string NodePriorityPropertyName = "nodePriority";
        
        /// <summary>
        /// Gets or sets the node priority used during master election
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::PropertyCommand(Opts.NodePriorityCmd)]
        [global::System.ComponentModel.DescriptionAttribute("The node priority used during master election")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::EventStoreService.Configuration.DatabaseElement.NodePriorityPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue=Opts.NodePriorityDefault)]
        public virtual int NodePriority
        {
            get
            {
                return ((int)(base[global::EventStoreService.Configuration.DatabaseElement.NodePriorityPropertyName]));
            }
            set
            {
                base[global::EventStoreService.Configuration.DatabaseElement.NodePriorityPropertyName] = value;
            }
        }
        #endregion
        
        #region DisableScavengeMerge Property
        /// <summary>
        /// The XML name of the <see cref="DisableScavengeMerge"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string DisableScavengeMergePropertyName = "disableScavengeMerge";
        
        /// <summary>
        /// Gets or sets disables the merging of chunks when scavenge is running
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::PropertyCommand(Opts.DisableScavengeMergeCmd)]
        [global::System.ComponentModel.DescriptionAttribute("Disables the merging of chunks when scavenge is running")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::EventStoreService.Configuration.DatabaseElement.DisableScavengeMergePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue=Opts.DisableScavengeMergeDefault)]
        public virtual bool DisableScavengeMerge
        {
            get
            {
                return ((bool)(base[global::EventStoreService.Configuration.DatabaseElement.DisableScavengeMergePropertyName]));
            }
            set
            {
                base[global::EventStoreService.Configuration.DatabaseElement.DisableScavengeMergePropertyName] = value;
            }
        }
        #endregion
    }
}
namespace EventStoreService.Configuration
{
    
    
    /// <summary>
    /// The ProjectionsElement Configuration Element.
    /// </summary>
    public partial class ProjectionsElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Run Property
        /// <summary>
        /// The XML name of the <see cref="Run"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string RunPropertyName = "run";
        
        /// <summary>
        /// Gets or sets enables the running of JavaScript projections.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::PropertyCommand(Opts.RunProjectionsCmd)]
        [global::System.ComponentModel.DescriptionAttribute("Enables the running of JavaScript projections.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::EventStoreService.Configuration.ProjectionsElement.RunPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue=RunProjections.System)]
        public virtual global::EventStoreService.Configuration.RunProjections Run
        {
            get
            {
                return ((global::EventStoreService.Configuration.RunProjections)(base[global::EventStoreService.Configuration.ProjectionsElement.RunPropertyName]));
            }
            set
            {
                base[global::EventStoreService.Configuration.ProjectionsElement.RunPropertyName] = value;
            }
        }
        #endregion
        
        #region Threads Property
        /// <summary>
        /// The XML name of the <see cref="Threads"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string ThreadsPropertyName = "threads";
        
        /// <summary>
        /// Gets or sets the number of threads to use for projections.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::PropertyCommand(Opts.ProjectionThreadsCmd)]
        [global::System.ComponentModel.DescriptionAttribute("The number of threads to use for projections.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::EventStoreService.Configuration.ProjectionsElement.ThreadsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue=Opts.ProjectionThreadsDefault)]
        public virtual int Threads
        {
            get
            {
                return ((int)(base[global::EventStoreService.Configuration.ProjectionsElement.ThreadsPropertyName]));
            }
            set
            {
                base[global::EventStoreService.Configuration.ProjectionsElement.ThreadsPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace EventStoreService.Configuration
{
    
    
    /// <summary>
    /// The SingleNodeElement Configuration Element.
    /// </summary>
    public partial class SingleNodeElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Ip Property
        /// <summary>
        /// The XML name of the <see cref="Ip"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string IpPropertyName = "ip";
        
        /// <summary>
        /// Gets or sets the IP address to bind to.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::PropertyCommand(Opts.IpCmd)]
        [global::System.ComponentModel.DescriptionAttribute("The IP address to bind to.")]
        [global::System.ComponentModel.TypeConverter(typeof(global::EventStoreService.Configuration.IPAddressTypeConverter))]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::EventStoreService.Configuration.SingleNodeElement.IpPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue="127.0.0.1")]
        public virtual global::System.Net.IPAddress Ip
        {
            get
            {
                return ((global::System.Net.IPAddress)(base[global::EventStoreService.Configuration.SingleNodeElement.IpPropertyName]));
            }
            set
            {
                base[global::EventStoreService.Configuration.SingleNodeElement.IpPropertyName] = value;
            }
        }
        #endregion
        
        #region TcpPort Property
        /// <summary>
        /// The XML name of the <see cref="TcpPort"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string TcpPortPropertyName = "tcpPort";
        
        /// <summary>
        /// Gets or sets the port to run the TCP server on.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::PropertyCommand(Opts.TcpPortCmd)]
        [global::System.ComponentModel.DescriptionAttribute("The port to run the TCP server on.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::EventStoreService.Configuration.SingleNodeElement.TcpPortPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue=Opts.TcpPortDefault)]
        public virtual int TcpPort
        {
            get
            {
                return ((int)(base[global::EventStoreService.Configuration.SingleNodeElement.TcpPortPropertyName]));
            }
            set
            {
                base[global::EventStoreService.Configuration.SingleNodeElement.TcpPortPropertyName] = value;
            }
        }
        #endregion
        
        #region SecureTcpPort Property
        /// <summary>
        /// The XML name of the <see cref="SecureTcpPort"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string SecureTcpPortPropertyName = "secureTcpPort";
        
        /// <summary>
        /// Gets or sets the SecureTcpPort.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::PropertyCommand(Opts.SecureTcpPortCmd)]
        [global::System.ComponentModel.DescriptionAttribute("The SecureTcpPort.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::EventStoreService.Configuration.SingleNodeElement.SecureTcpPortPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue=Opts.SecureTcpPortDefault)]
        public virtual int SecureTcpPort
        {
            get
            {
                return ((int)(base[global::EventStoreService.Configuration.SingleNodeElement.SecureTcpPortPropertyName]));
            }
            set
            {
                base[global::EventStoreService.Configuration.SingleNodeElement.SecureTcpPortPropertyName] = value;
            }
        }
        #endregion
        
        #region HttpPort Property
        /// <summary>
        /// The XML name of the <see cref="HttpPort"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string HttpPortPropertyName = "httpPort";
        
        /// <summary>
        /// Gets or sets the port to run the HTTP server on.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::PropertyCommand(Opts.HttpPortCmd)]
        [global::System.ComponentModel.DescriptionAttribute("The port to run the HTTP server on.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::EventStoreService.Configuration.SingleNodeElement.HttpPortPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue=Opts.HttpPortDefault)]
        public virtual int HttpPort
        {
            get
            {
                return ((int)(base[global::EventStoreService.Configuration.SingleNodeElement.HttpPortPropertyName]));
            }
            set
            {
                base[global::EventStoreService.Configuration.SingleNodeElement.HttpPortPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace EventStoreService.Configuration
{
    
    
    /// <summary>
    /// The ClusterElement Configuration Element.
    /// </summary>
    public partial class ClusterElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region ClusterSize Property
        /// <summary>
        /// The XML name of the <see cref="ClusterSize"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string ClusterSizePropertyName = "clusterSize";
        
        /// <summary>
        /// Gets or sets the number of nodes in the cluster.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::PropertyCommand(Opts.ClusterSizeCmd)]
        [global::System.ComponentModel.DescriptionAttribute("The number of nodes in the cluster.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::EventStoreService.Configuration.ClusterElement.ClusterSizePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue=Opts.ClusterSizeDefault)]
        public virtual int ClusterSize
        {
            get
            {
                return ((int)(base[global::EventStoreService.Configuration.ClusterElement.ClusterSizePropertyName]));
            }
            set
            {
                base[global::EventStoreService.Configuration.ClusterElement.ClusterSizePropertyName] = value;
            }
        }
        #endregion
        
        #region CommitCount Property
        /// <summary>
        /// The XML name of the <see cref="CommitCount"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string CommitCountPropertyName = "commitCount";
        
        /// <summary>
        /// Gets or sets the number of nodes which must acknowledge commits before acknowledging to a client.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::PropertyCommand(Opts.CommitCountCmd)]
        [global::System.ComponentModel.DescriptionAttribute("The number of nodes which must acknowledge commits before acknowledging to a clie" +
            "nt.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::EventStoreService.Configuration.ClusterElement.CommitCountPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue=Opts.CommitCountDefault)]
        public virtual int CommitCount
        {
            get
            {
                return ((int)(base[global::EventStoreService.Configuration.ClusterElement.CommitCountPropertyName]));
            }
            set
            {
                base[global::EventStoreService.Configuration.ClusterElement.CommitCountPropertyName] = value;
            }
        }
        #endregion
        
        #region PrepareCount Property
        /// <summary>
        /// The XML name of the <see cref="PrepareCount"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string PrepareCountPropertyName = "prepareCount";
        
        /// <summary>
        /// Gets or sets the number of nodes which must acknowledge prepares.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::PropertyCommand(Opts.PrepareCountCmd)]
        [global::System.ComponentModel.DescriptionAttribute("The number of nodes which must acknowledge prepares.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::EventStoreService.Configuration.ClusterElement.PrepareCountPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue=Opts.PrepareCountDefault)]
        public virtual int PrepareCount
        {
            get
            {
                return ((int)(base[global::EventStoreService.Configuration.ClusterElement.PrepareCountPropertyName]));
            }
            set
            {
                base[global::EventStoreService.Configuration.ClusterElement.PrepareCountPropertyName] = value;
            }
        }
        #endregion
        
        #region Ip Property
        /// <summary>
        /// The XML name of the <see cref="Ip"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string IpPropertyName = "ip";
        
        /// <summary>
        /// Gets or sets the Ip.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Ip.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::EventStoreService.Configuration.ClusterElement.IpPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::EventStoreService.Configuration.ClusterIpElement Ip
        {
            get
            {
                return ((global::EventStoreService.Configuration.ClusterIpElement)(base[global::EventStoreService.Configuration.ClusterElement.IpPropertyName]));
            }
            set
            {
                base[global::EventStoreService.Configuration.ClusterElement.IpPropertyName] = value;
            }
        }
        #endregion
        
        #region Http Property
        /// <summary>
        /// The XML name of the <see cref="Http"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string HttpPropertyName = "http";
        
        /// <summary>
        /// Gets or sets the Http.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Http.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::EventStoreService.Configuration.ClusterElement.HttpPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::EventStoreService.Configuration.ClusterHttpElement Http
        {
            get
            {
                return ((global::EventStoreService.Configuration.ClusterHttpElement)(base[global::EventStoreService.Configuration.ClusterElement.HttpPropertyName]));
            }
            set
            {
                base[global::EventStoreService.Configuration.ClusterElement.HttpPropertyName] = value;
            }
        }
        #endregion
        
        #region Tcp Property
        /// <summary>
        /// The XML name of the <see cref="Tcp"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string TcpPropertyName = "tcp";
        
        /// <summary>
        /// Gets or sets the Tcp.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Tcp.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::EventStoreService.Configuration.ClusterElement.TcpPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::EventStoreService.Configuration.ClusterTcpElement Tcp
        {
            get
            {
                return ((global::EventStoreService.Configuration.ClusterTcpElement)(base[global::EventStoreService.Configuration.ClusterElement.TcpPropertyName]));
            }
            set
            {
                base[global::EventStoreService.Configuration.ClusterElement.TcpPropertyName] = value;
            }
        }
        #endregion
        
        #region Manager Property
        /// <summary>
        /// The XML name of the <see cref="Manager"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string ManagerPropertyName = "manager";
        
        /// <summary>
        /// Gets or sets the Manager.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Manager.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::EventStoreService.Configuration.ClusterElement.ManagerPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::EventStoreService.Configuration.ClusterManagerElement Manager
        {
            get
            {
                return ((global::EventStoreService.Configuration.ClusterManagerElement)(base[global::EventStoreService.Configuration.ClusterElement.ManagerPropertyName]));
            }
            set
            {
                base[global::EventStoreService.Configuration.ClusterElement.ManagerPropertyName] = value;
            }
        }
        #endregion
        
        #region Ssl Property
        /// <summary>
        /// The XML name of the <see cref="Ssl"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string SslPropertyName = "ssl";
        
        /// <summary>
        /// Gets or sets the Ssl.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Ssl.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::EventStoreService.Configuration.ClusterElement.SslPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::EventStoreService.Configuration.ClusterSslElement Ssl
        {
            get
            {
                return ((global::EventStoreService.Configuration.ClusterSslElement)(base[global::EventStoreService.Configuration.ClusterElement.SslPropertyName]));
            }
            set
            {
                base[global::EventStoreService.Configuration.ClusterElement.SslPropertyName] = value;
            }
        }
        #endregion
        
        #region Dns Property
        /// <summary>
        /// The XML name of the <see cref="Dns"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string DnsPropertyName = "dns";
        
        /// <summary>
        /// Gets or sets the Dns.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Dns.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::EventStoreService.Configuration.ClusterElement.DnsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::EventStoreService.Configuration.ClusterDnsElement Dns
        {
            get
            {
                return ((global::EventStoreService.Configuration.ClusterDnsElement)(base[global::EventStoreService.Configuration.ClusterElement.DnsPropertyName]));
            }
            set
            {
                base[global::EventStoreService.Configuration.ClusterElement.DnsPropertyName] = value;
            }
        }
        #endregion
        
        #region Gossip Property
        /// <summary>
        /// The XML name of the <see cref="Gossip"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string GossipPropertyName = "gossip";
        
        /// <summary>
        /// Gets or sets the Gossip.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Gossip.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::EventStoreService.Configuration.ClusterElement.GossipPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::EventStoreService.Configuration.ClusterGossipElement Gossip
        {
            get
            {
                return ((global::EventStoreService.Configuration.ClusterGossipElement)(base[global::EventStoreService.Configuration.ClusterElement.GossipPropertyName]));
            }
            set
            {
                base[global::EventStoreService.Configuration.ClusterElement.GossipPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace EventStoreService.Configuration
{
    
    
    /// <summary>
    /// The ClusterIpElement Configuration Element.
    /// </summary>
    public partial class ClusterIpElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Internal Property
        /// <summary>
        /// The XML name of the <see cref="Internal"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string InternalPropertyName = "internal";
        
        /// <summary>
        /// Gets or sets internal IP Address.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::PropertyCommand(Opts.InternalIpCmd)]
        [global::System.ComponentModel.DescriptionAttribute("Internal IP Address.")]
        [global::System.ComponentModel.TypeConverter(typeof(global::EventStoreService.Configuration.IPAddressTypeConverter))]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::EventStoreService.Configuration.ClusterIpElement.InternalPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue="127.0.0.1")]
        public virtual global::System.Net.IPAddress Internal
        {
            get
            {
                return ((global::System.Net.IPAddress)(base[global::EventStoreService.Configuration.ClusterIpElement.InternalPropertyName]));
            }
            set
            {
                base[global::EventStoreService.Configuration.ClusterIpElement.InternalPropertyName] = value;
            }
        }
        #endregion
        
        #region External Property
        /// <summary>
        /// The XML name of the <see cref="External"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string ExternalPropertyName = "external";
        
        /// <summary>
        /// Gets or sets external IP Address.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::PropertyCommand(Opts.ExternalIpCmd)]
        [global::System.ComponentModel.DescriptionAttribute("External IP Address.")]
        [global::System.ComponentModel.TypeConverter(typeof(global::EventStoreService.Configuration.IPAddressTypeConverter))]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::EventStoreService.Configuration.ClusterIpElement.ExternalPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue="127.0.0.1")]
        public virtual global::System.Net.IPAddress External
        {
            get
            {
                return ((global::System.Net.IPAddress)(base[global::EventStoreService.Configuration.ClusterIpElement.ExternalPropertyName]));
            }
            set
            {
                base[global::EventStoreService.Configuration.ClusterIpElement.ExternalPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace EventStoreService.Configuration
{
    
    
    /// <summary>
    /// The ClusterHttpElement Configuration Element.
    /// </summary>
    public partial class ClusterHttpElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region InternalPort Property
        /// <summary>
        /// The XML name of the <see cref="InternalPort"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string InternalPortPropertyName = "internalPort";
        
        /// <summary>
        /// Gets or sets internal HTTP Port.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::PropertyCommand(Opts.InternalHttpPortCmd)]
        [global::System.ComponentModel.DescriptionAttribute("Internal HTTP Port.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::EventStoreService.Configuration.ClusterHttpElement.InternalPortPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue=Opts.InternalHttpPortDefault)]
        public virtual int InternalPort
        {
            get
            {
                return ((int)(base[global::EventStoreService.Configuration.ClusterHttpElement.InternalPortPropertyName]));
            }
            set
            {
                base[global::EventStoreService.Configuration.ClusterHttpElement.InternalPortPropertyName] = value;
            }
        }
        #endregion
        
        #region ExternalPort Property
        /// <summary>
        /// The XML name of the <see cref="ExternalPort"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string ExternalPortPropertyName = "externalPort";
        
        /// <summary>
        /// Gets or sets external HTTP Port.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::PropertyCommand(Opts.ExternalHttpPortCmd)]
        [global::System.ComponentModel.DescriptionAttribute("External HTTP Port.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::EventStoreService.Configuration.ClusterHttpElement.ExternalPortPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue=Opts.ExternalHttpPortDefault)]
        public virtual int ExternalPort
        {
            get
            {
                return ((int)(base[global::EventStoreService.Configuration.ClusterHttpElement.ExternalPortPropertyName]));
            }
            set
            {
                base[global::EventStoreService.Configuration.ClusterHttpElement.ExternalPortPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace EventStoreService.Configuration
{
    
    
    /// <summary>
    /// The ClusterTcpElement Configuration Element.
    /// </summary>
    public partial class ClusterTcpElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region InternalPort Property
        /// <summary>
        /// The XML name of the <see cref="InternalPort"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string InternalPortPropertyName = "internalPort";
        
        /// <summary>
        /// Gets or sets internal TCP Port.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::PropertyCommand(Opts.InternalTcpPortCmd)]
        [global::System.ComponentModel.DescriptionAttribute("Internal TCP Port.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::EventStoreService.Configuration.ClusterTcpElement.InternalPortPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue=Opts.InternalTcpPortDefault)]
        public virtual int InternalPort
        {
            get
            {
                return ((int)(base[global::EventStoreService.Configuration.ClusterTcpElement.InternalPortPropertyName]));
            }
            set
            {
                base[global::EventStoreService.Configuration.ClusterTcpElement.InternalPortPropertyName] = value;
            }
        }
        #endregion
        
        #region InternalSecurePort Property
        /// <summary>
        /// The XML name of the <see cref="InternalSecurePort"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string InternalSecurePortPropertyName = "internalSecurePort";
        
        /// <summary>
        /// Gets or sets internal Secure TCP Port.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::PropertyCommand(Opts.InternalSecureTcpPortCmd)]
        [global::System.ComponentModel.DescriptionAttribute("Internal Secure TCP Port.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::EventStoreService.Configuration.ClusterTcpElement.InternalSecurePortPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue=Opts.InternalSecureTcpPortDefault)]
        public virtual int InternalSecurePort
        {
            get
            {
                return ((int)(base[global::EventStoreService.Configuration.ClusterTcpElement.InternalSecurePortPropertyName]));
            }
            set
            {
                base[global::EventStoreService.Configuration.ClusterTcpElement.InternalSecurePortPropertyName] = value;
            }
        }
        #endregion
        
        #region ExternalPort Property
        /// <summary>
        /// The XML name of the <see cref="ExternalPort"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string ExternalPortPropertyName = "externalPort";
        
        /// <summary>
        /// Gets or sets external TCP Port.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::PropertyCommand(Opts.ExternalTcpPortCmd)]
        [global::System.ComponentModel.DescriptionAttribute("External TCP Port.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::EventStoreService.Configuration.ClusterTcpElement.ExternalPortPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue=Opts.ExternalTcpPortDefault)]
        public virtual int ExternalPort
        {
            get
            {
                return ((int)(base[global::EventStoreService.Configuration.ClusterTcpElement.ExternalPortPropertyName]));
            }
            set
            {
                base[global::EventStoreService.Configuration.ClusterTcpElement.ExternalPortPropertyName] = value;
            }
        }
        #endregion
        
        #region ExternalSecurePort Property
        /// <summary>
        /// The XML name of the <see cref="ExternalSecurePort"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string ExternalSecurePortPropertyName = "externalSecurePort";
        
        /// <summary>
        /// Gets or sets external Secure TCP Port.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::PropertyCommand(Opts.ExternalSecureTcpPortCmd)]
        [global::System.ComponentModel.DescriptionAttribute("External Secure TCP Port.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::EventStoreService.Configuration.ClusterTcpElement.ExternalSecurePortPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue=Opts.ExternalSecureTcpPortDefault)]
        public virtual int ExternalSecurePort
        {
            get
            {
                return ((int)(base[global::EventStoreService.Configuration.ClusterTcpElement.ExternalSecurePortPropertyName]));
            }
            set
            {
                base[global::EventStoreService.Configuration.ClusterTcpElement.ExternalSecurePortPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace EventStoreService.Configuration
{
    
    
    /// <summary>
    /// The ClusterManagerElement Configuration Element.
    /// </summary>
    public partial class ClusterManagerElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region InternalIp Property
        /// <summary>
        /// The XML name of the <see cref="InternalIp"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string InternalIpPropertyName = "internalIp";
        
        /// <summary>
        /// Gets or sets the InternalIp.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::PropertyCommand(Opts.InternalManagerIpCmd)]
        [global::System.ComponentModel.DescriptionAttribute("The InternalIp.")]
        [global::System.ComponentModel.TypeConverter(typeof(global::EventStoreService.Configuration.IPAddressTypeConverter))]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::EventStoreService.Configuration.ClusterManagerElement.InternalIpPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue="127.0.0.1")]
        public virtual global::System.Net.IPAddress InternalIp
        {
            get
            {
                return ((global::System.Net.IPAddress)(base[global::EventStoreService.Configuration.ClusterManagerElement.InternalIpPropertyName]));
            }
            set
            {
                base[global::EventStoreService.Configuration.ClusterManagerElement.InternalIpPropertyName] = value;
            }
        }
        #endregion
        
        #region ExternalIp Property
        /// <summary>
        /// The XML name of the <see cref="ExternalIp"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string ExternalIpPropertyName = "externalIp";
        
        /// <summary>
        /// Gets or sets the ExternalIp.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::PropertyCommand(Opts.ExternalManagerIpCmd)]
        [global::System.ComponentModel.DescriptionAttribute("The ExternalIp.")]
        [global::System.ComponentModel.TypeConverter(typeof(global::EventStoreService.Configuration.IPAddressTypeConverter))]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::EventStoreService.Configuration.ClusterManagerElement.ExternalIpPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue="127.0.0.1")]
        public virtual global::System.Net.IPAddress ExternalIp
        {
            get
            {
                return ((global::System.Net.IPAddress)(base[global::EventStoreService.Configuration.ClusterManagerElement.ExternalIpPropertyName]));
            }
            set
            {
                base[global::EventStoreService.Configuration.ClusterManagerElement.ExternalIpPropertyName] = value;
            }
        }
        #endregion
        
        #region InternalHttpPort Property
        /// <summary>
        /// The XML name of the <see cref="InternalHttpPort"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string InternalHttpPortPropertyName = "internalHttpPort";
        
        /// <summary>
        /// Gets or sets the InternalHttpPort.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::PropertyCommand(Opts.InternalManagerHttpPortCmd)]
        [global::System.ComponentModel.DescriptionAttribute("The InternalHttpPort.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::EventStoreService.Configuration.ClusterManagerElement.InternalHttpPortPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue=Opts.InternalManagerHttpPortDefault)]
        public virtual int InternalHttpPort
        {
            get
            {
                return ((int)(base[global::EventStoreService.Configuration.ClusterManagerElement.InternalHttpPortPropertyName]));
            }
            set
            {
                base[global::EventStoreService.Configuration.ClusterManagerElement.InternalHttpPortPropertyName] = value;
            }
        }
        #endregion
        
        #region ExternalHttpPort Property
        /// <summary>
        /// The XML name of the <see cref="ExternalHttpPort"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string ExternalHttpPortPropertyName = "externalHttpPort";
        
        /// <summary>
        /// Gets or sets the ExternalHttpPort.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::PropertyCommand(Opts.ExternalManagerHttpPortCmd)]
        [global::System.ComponentModel.DescriptionAttribute("The ExternalHttpPort.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::EventStoreService.Configuration.ClusterManagerElement.ExternalHttpPortPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue=Opts.ExternalManagerHttpPortDefault)]
        public virtual int ExternalHttpPort
        {
            get
            {
                return ((int)(base[global::EventStoreService.Configuration.ClusterManagerElement.ExternalHttpPortPropertyName]));
            }
            set
            {
                base[global::EventStoreService.Configuration.ClusterManagerElement.ExternalHttpPortPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace EventStoreService.Configuration
{
    
    
    /// <summary>
    /// The ClusterSslElement Configuration Element.
    /// </summary>
    public partial class ClusterSslElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region UseInternalSsl Property
        /// <summary>
        /// The XML name of the <see cref="UseInternalSsl"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string UseInternalSslPropertyName = "useInternalSsl";
        
        /// <summary>
        /// Gets or sets whether to use secure internal communication.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::PropertyCommand(Opts.UseInternalSslCmd)]
        [global::System.ComponentModel.DescriptionAttribute("Whether to use secure internal communication.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::EventStoreService.Configuration.ClusterSslElement.UseInternalSslPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue=Opts.UseInternalSslDefault)]
        public virtual bool UseInternalSsl
        {
            get
            {
                return ((bool)(base[global::EventStoreService.Configuration.ClusterSslElement.UseInternalSslPropertyName]));
            }
            set
            {
                base[global::EventStoreService.Configuration.ClusterSslElement.UseInternalSslPropertyName] = value;
            }
        }
        #endregion
        
        #region SslTargetHost Property
        /// <summary>
        /// The XML name of the <see cref="SslTargetHost"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string SslTargetHostPropertyName = "sslTargetHost";
        
        /// <summary>
        /// Gets or sets target host of server's SSL certificate.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::PropertyCommand(Opts.SslTargetHostCmd)]
        [global::System.ComponentModel.DescriptionAttribute("Target host of server\'s SSL certificate.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::EventStoreService.Configuration.ClusterSslElement.SslTargetHostPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue=Opts.SslTargetHostDefault)]
        public virtual string SslTargetHost
        {
            get
            {
                return ((string)(base[global::EventStoreService.Configuration.ClusterSslElement.SslTargetHostPropertyName]));
            }
            set
            {
                base[global::EventStoreService.Configuration.ClusterSslElement.SslTargetHostPropertyName] = value;
            }
        }
        #endregion
        
        #region SslValidateServer Property
        /// <summary>
        /// The XML name of the <see cref="SslValidateServer"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string SslValidateServerPropertyName = "sslValidateServer";
        
        /// <summary>
        /// Gets or sets the SslValidateServer.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::PropertyCommand(Opts.SslValidateServerCmd)]
        [global::System.ComponentModel.DescriptionAttribute("The SslValidateServer.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::EventStoreService.Configuration.ClusterSslElement.SslValidateServerPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue=Opts.SslValidateServerDefault)]
        public virtual bool SslValidateServer
        {
            get
            {
                return ((bool)(base[global::EventStoreService.Configuration.ClusterSslElement.SslValidateServerPropertyName]));
            }
            set
            {
                base[global::EventStoreService.Configuration.ClusterSslElement.SslValidateServerPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace EventStoreService.Configuration
{
    
    
    /// <summary>
    /// The ClusterDnsElement Configuration Element.
    /// </summary>
    public partial class ClusterDnsElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region DiscoverViaDns Property
        /// <summary>
        /// The XML name of the <see cref="DiscoverViaDns"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string DiscoverViaDnsPropertyName = "discoverViaDns";
        
        /// <summary>
        /// Gets or sets whether to use DNS lookup to discover other cluster nodes.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::PropertyCommand(Opts.DiscoverViaDnsCmd)]
        [global::System.ComponentModel.DescriptionAttribute("Whether to use DNS lookup to discover other cluster nodes.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::EventStoreService.Configuration.ClusterDnsElement.DiscoverViaDnsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue=Opts.DiscoverViaDnsDefault)]
        public virtual bool DiscoverViaDns
        {
            get
            {
                return ((bool)(base[global::EventStoreService.Configuration.ClusterDnsElement.DiscoverViaDnsPropertyName]));
            }
            set
            {
                base[global::EventStoreService.Configuration.ClusterDnsElement.DiscoverViaDnsPropertyName] = value;
            }
        }
        #endregion
        
        #region ClusterDns Property
        /// <summary>
        /// The XML name of the <see cref="ClusterDns"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string ClusterDnsPropertyName = "clusterDns";
        
        /// <summary>
        /// Gets or sets dNS name from which other nodes can be discovered.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::PropertyCommand(Opts.ClusterDnsCmd)]
        [global::System.ComponentModel.DescriptionAttribute("DNS name from which other nodes can be discovered.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::EventStoreService.Configuration.ClusterDnsElement.ClusterDnsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue=Opts.ClusterDnsDefault)]
        public virtual string ClusterDns
        {
            get
            {
                return ((string)(base[global::EventStoreService.Configuration.ClusterDnsElement.ClusterDnsPropertyName]));
            }
            set
            {
                base[global::EventStoreService.Configuration.ClusterDnsElement.ClusterDnsPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace EventStoreService.Configuration
{
    
    
    /// <summary>
    /// The ClusterGossipElement Configuration Element.
    /// </summary>
    public partial class ClusterGossipElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Port Property
        /// <summary>
        /// The XML name of the <see cref="Port"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string PortPropertyName = "port";
        
        /// <summary>
        /// Gets or sets the port on which cluster nodes' managers are running.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::PropertyCommand(Opts.ClusterGossipPortCmd)]
        [global::System.ComponentModel.DescriptionAttribute("The port on which cluster nodes\' managers are running.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::EventStoreService.Configuration.ClusterGossipElement.PortPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue=Opts.ClusterGossipPortDefault)]
        public virtual int Port
        {
            get
            {
                return ((int)(base[global::EventStoreService.Configuration.ClusterGossipElement.PortPropertyName]));
            }
            set
            {
                base[global::EventStoreService.Configuration.ClusterGossipElement.PortPropertyName] = value;
            }
        }
        #endregion
        
        #region Seeds Property
        /// <summary>
        /// The XML name of the <see cref="Seeds"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string SeedsPropertyName = "seeds";
        
        /// <summary>
        /// Gets or sets endpoints for other cluster nodes from which to seed gossip
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("Endpoints for other cluster nodes from which to seed gossip")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::EventStoreService.Configuration.ClusterGossipElement.SeedsPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=true)]
        public virtual global::EventStoreService.Configuration.IPEndpointElementCollection Seeds
        {
            get
            {
                return ((global::EventStoreService.Configuration.IPEndpointElementCollection)(base[global::EventStoreService.Configuration.ClusterGossipElement.SeedsPropertyName]));
            }
            set
            {
                base[global::EventStoreService.Configuration.ClusterGossipElement.SeedsPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace EventStoreService.Configuration
{
    
    
    /// <summary>
    /// The IPEndpointElement Configuration Element.
    /// </summary>
    public partial class IPEndpointElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Address Property
        /// <summary>
        /// The XML name of the <see cref="Address"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string AddressPropertyName = "address";
        
        /// <summary>
        /// Gets or sets the Address.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::PropertyCommand(Opts.GossipSeedCmd)]
        [global::System.ComponentModel.DescriptionAttribute("The Address.")]
        [global::System.ComponentModel.TypeConverter(typeof(global::EventStoreService.Configuration.IPEndPointTypeConverter))]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::EventStoreService.Configuration.IPEndpointElement.AddressPropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual global::System.Net.IPEndPoint Address
        {
            get
            {
                return ((global::System.Net.IPEndPoint)(base[global::EventStoreService.Configuration.IPEndpointElement.AddressPropertyName]));
            }
            set
            {
                base[global::EventStoreService.Configuration.IPEndpointElement.AddressPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace EventStoreService.Configuration
{
    
    
    /// <summary>
    /// A collection of IPEndpointElement instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::EventStoreService.Configuration.IPEndpointElement), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::EventStoreService.Configuration.IPEndpointElementCollection.IPEndpointElementPropertyName)]
    public partial class IPEndpointElementCollection : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::EventStoreService.Configuration.IPEndpointElement"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string IPEndpointElementPropertyName = "endpoint";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override string ElementName
        {
            get
            {
                return global::EventStoreService.Configuration.IPEndpointElementCollection.IPEndpointElementPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::EventStoreService.Configuration.IPEndpointElementCollection.IPEndpointElementPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::EventStoreService.Configuration.IPEndpointElement)(element)).Address;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::EventStoreService.Configuration.IPEndpointElement"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::EventStoreService.Configuration.IPEndpointElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::EventStoreService.Configuration.IPEndpointElement();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::EventStoreService.Configuration.IPEndpointElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::EventStoreService.Configuration.IPEndpointElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::EventStoreService.Configuration.IPEndpointElement this[int index]
        {
            get
            {
                return ((global::EventStoreService.Configuration.IPEndpointElement)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::EventStoreService.Configuration.IPEndpointElement"/> with the specified key.
        /// </summary>
        /// <param name="address">The key of the <see cref="global::EventStoreService.Configuration.IPEndpointElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::EventStoreService.Configuration.IPEndpointElement this[object address]
        {
            get
            {
                return ((global::EventStoreService.Configuration.IPEndpointElement)(base.BaseGet(address)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::EventStoreService.Configuration.IPEndpointElement"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="endpoint">The <see cref="global::EventStoreService.Configuration.IPEndpointElement"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Add(global::EventStoreService.Configuration.IPEndpointElement endpoint)
        {
            base.BaseAdd(endpoint);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::EventStoreService.Configuration.IPEndpointElement"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="endpoint">The <see cref="global::EventStoreService.Configuration.IPEndpointElement"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Remove(global::EventStoreService.Configuration.IPEndpointElement endpoint)
        {
            base.BaseRemove(this.GetElementKey(endpoint));
        }
        #endregion
        
        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::EventStoreService.Configuration.IPEndpointElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::EventStoreService.Configuration.IPEndpointElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::EventStoreService.Configuration.IPEndpointElement GetItemAt(int index)
        {
            return ((global::EventStoreService.Configuration.IPEndpointElement)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::EventStoreService.Configuration.IPEndpointElement"/> with the specified key.
        /// </summary>
        /// <param name="address">The key of the <see cref="global::EventStoreService.Configuration.IPEndpointElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::EventStoreService.Configuration.IPEndpointElement GetItemByKey(global::System.Net.IPEndPoint address)
        {
            return ((global::EventStoreService.Configuration.IPEndpointElement)(base.BaseGet(((object)(address)))));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace EventStoreService.Configuration
{
    
    
    /// <summary>
    /// IPAddressTypeConverter Custom Converter
    /// </summary>
    public partial class IPAddressTypeConverter : global::System.Configuration.ConfigurationConverterBase
    {
        
        /// <summary>
        /// Converts from <see cref="string" /> to <see cref="global::System.Net.IPAddress" />.
        /// </summary>
        /// <param name="context">The <see cref="global::System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
        /// <param name="culture">The <see cref="global::System.Globalization.CultureInfo" /> to use as the current culture.</param>
        /// <param name="value">The <see cref="string" /> to convert from.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override object ConvertFrom(global::System.ComponentModel.ITypeDescriptorContext context, global::System.Globalization.CultureInfo culture, object value)
        {
            // IMPORTANT NOTE: The code below does not build by default.
            // This is a custom type validator that must be implemented
            // for it to build. Place the following in a separate file
            // and implement the method.
            // 
            // public partial class IPAddressTypeConverter
            // {
            //     
            //     private global::System.Net.IPAddress ConvertFromStringToIPAddress(global::System.ComponentModel.ITypeDescriptorContext context, global::System.Globalization.CultureInfo culture, string value)
            //     {
            //         throw new global::System.NotImplementedException();
            //     }
            // }
            // 
            return this.ConvertFromStringToIPAddress(context, culture, ((string)(value)));
        }
        
        /// <summary>
        /// Converts from <see cref="global::System.Net.IPAddress" /> to <see cref="string" />.
        /// </summary>
        /// <param name="context">The <see cref="global::System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
        /// <param name="culture">The <see cref="global::System.Globalization.CultureInfo" /> to use as the current culture.</param>
        /// <param name="value">The <see cref="string" /> to convert from.</param>
        /// <param name="type">The <see cref="global::System.Type" /> to convert the value parameter to.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override object ConvertTo(global::System.ComponentModel.ITypeDescriptorContext context, global::System.Globalization.CultureInfo culture, object value, global::System.Type type)
        {
            // IMPORTANT NOTE: The code below does not build by default.
            // This is a custom type validator that must be implemented
            // for it to build. Place the following in a separate file
            // and implement the method.
            // 
            // public partial class IPAddressTypeConverter
            // {
            //     
            //     private string ConvertToIPAddressFromString(global::System.ComponentModel.ITypeDescriptorContext context, global::System.Globalization.CultureInfo culture, global::System.Net.IPAddress value, global::System.Type type)
            //     {
            //         return value.ToString();
            //     }
            // }
            // 
            return this.ConvertToIPAddressFromString(context, culture, ((global::System.Net.IPAddress)(value)), type);
        }
    }
    
    /// <summary>
    /// IPEndPointTypeConverter Custom Converter
    /// </summary>
    public partial class IPEndPointTypeConverter : global::System.Configuration.ConfigurationConverterBase
    {
        
        /// <summary>
        /// Converts from <see cref="string" /> to <see cref="global::System.Net.IPEndPoint" />.
        /// </summary>
        /// <param name="context">The <see cref="global::System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
        /// <param name="culture">The <see cref="global::System.Globalization.CultureInfo" /> to use as the current culture.</param>
        /// <param name="value">The <see cref="string" /> to convert from.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override object ConvertFrom(global::System.ComponentModel.ITypeDescriptorContext context, global::System.Globalization.CultureInfo culture, object value)
        {
            // IMPORTANT NOTE: The code below does not build by default.
            // This is a custom type validator that must be implemented
            // for it to build. Place the following in a separate file
            // and implement the method.
            // 
            // public partial class IPEndPointTypeConverter
            // {
            //     
            //     private global::System.Net.IPEndPoint ConvertFromStringToIPEndPoint(global::System.ComponentModel.ITypeDescriptorContext context, global::System.Globalization.CultureInfo culture, string value)
            //     {
            //         throw new global::System.NotImplementedException();
            //     }
            // }
            // 
            return this.ConvertFromStringToIPEndPoint(context, culture, ((string)(value)));
        }
        
        /// <summary>
        /// Converts from <see cref="global::System.Net.IPEndPoint" /> to <see cref="string" />.
        /// </summary>
        /// <param name="context">The <see cref="global::System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
        /// <param name="culture">The <see cref="global::System.Globalization.CultureInfo" /> to use as the current culture.</param>
        /// <param name="value">The <see cref="string" /> to convert from.</param>
        /// <param name="type">The <see cref="global::System.Type" /> to convert the value parameter to.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override object ConvertTo(global::System.ComponentModel.ITypeDescriptorContext context, global::System.Globalization.CultureInfo culture, object value, global::System.Type type)
        {
            // IMPORTANT NOTE: The code below does not build by default.
            // This is a custom type validator that must be implemented
            // for it to build. Place the following in a separate file
            // and implement the method.
            // 
            // public partial class IPEndPointTypeConverter
            // {
            //     
            //     private string ConvertToIPEndPointFromString(global::System.ComponentModel.ITypeDescriptorContext context, global::System.Globalization.CultureInfo culture, global::System.Net.IPEndPoint value, global::System.Type type)
            //     {
            //         return value.ToString();
            //     }
            // }
            // 
            return this.ConvertToIPEndPointFromString(context, culture, ((global::System.Net.IPEndPoint)(value)), type);
        }
    }
}
